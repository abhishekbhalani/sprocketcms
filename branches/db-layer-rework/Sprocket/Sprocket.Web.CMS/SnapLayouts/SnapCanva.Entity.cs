/* ---------------------------------------------------------------------------------------
	This class has been auto-generated by the Sprocket Class Generator. It is recommended
	that you do not modify this file and instead use the fact that it has been generated
	as a partial class to create a separate partial class for storing any custom code that
	you write to extend the functionality of this class.
   --------------------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

using Sprocket;
using Sprocket.Data;
using Sprocket.Web;

namespace Sprocket.Web.CMS
{
	public partial class SnapCanvas : IJSONEncoder
	{
		#region Fields
		
		protected long snapCanvasID = 0;
		protected short unitWidth = 0;
		protected short unitHeight = 0;
		protected bool widthExpandable = false;
		protected bool heightExpandable = false;
		
		#endregion

		#region Properties
		
		///<summary>
		///Gets or sets the value for SnapCanvasID
		///</summary>
		public long SnapCanvasID
		{
			get { return snapCanvasID; }
			set { snapCanvasID = value; }
		}

		///<summary>
		///Gets or sets the value for UnitWidth
		///</summary>
		public short UnitWidth
		{
			get { return unitWidth; }
			set { unitWidth = value; }
		}

		///<summary>
		///Gets or sets the value for UnitHeight
		///</summary>
		public short UnitHeight
		{
			get { return unitHeight; }
			set { unitHeight = value; }
		}

		///<summary>
		///Gets or sets the value for WidthExpandable
		///</summary>
		public bool WidthExpandable
		{
			get { return widthExpandable; }
			set { widthExpandable = value; }
		}

		///<summary>
		///Gets or sets the value for HeightExpandable
		///</summary>
		public bool HeightExpandable
		{
			get { return heightExpandable; }
			set { heightExpandable = value; }
		}
		
		#endregion

		#region Constructors

		public SnapCanvas()
		{
		}
		
		public SnapCanvas(long snapCanvasID, short unitWidth, short unitHeight, bool widthExpandable, bool heightExpandable)
		{
			this.snapCanvasID = snapCanvasID;
			this.unitWidth = unitWidth;
			this.unitHeight = unitHeight;
			this.widthExpandable = widthExpandable;
			this.heightExpandable = heightExpandable;
		}
		
		public SnapCanvas(IDataReader reader)
		{
			if(reader["SnapCanvasID"] != DBNull.Value) snapCanvasID = (long)reader["SnapCanvasID"];
			if(reader["UnitWidth"] != DBNull.Value) unitWidth = (short)reader["UnitWidth"];
			if(reader["UnitHeight"] != DBNull.Value) unitHeight = (short)reader["UnitHeight"];
			if(reader["WidthExpandable"] != DBNull.Value) widthExpandable = (bool)reader["WidthExpandable"];
			if(reader["HeightExpandable"] != DBNull.Value) heightExpandable = (bool)reader["HeightExpandable"];
		}

		#endregion

		#region JSON Methods
		
		/// <summary>
		/// Writes this entity out as a JSON formatted string
		/// </summary>
		public void WriteJSON(StringWriter writer)
		{
			writer.Write("{");
			JSON.EncodeNameValuePair(writer, "SnapCanvasID",snapCanvasID);
			writer.Write(",");
			JSON.EncodeNameValuePair(writer, "UnitWidth",unitWidth);
			writer.Write(",");
			JSON.EncodeNameValuePair(writer, "UnitHeight",unitHeight);
			writer.Write(",");
			JSON.EncodeNameValuePair(writer, "WidthExpandable",widthExpandable);
			writer.Write(",");
			JSON.EncodeNameValuePair(writer, "HeightExpandable",heightExpandable);
			writer.Write("}");
		}
		
		#endregion
	}
	
	class DataLayer
	{
		public SqlParameter NewSqlParameter(string name, object value, SqlDbType dbType)
		{
			SqlParameter prm = new SqlParameter(name, value);
			prm.SqlDbType = dbType;
			return prm;
		}
		
		public Result Store(SnapCanvas snapCanvas)
		{
			using (TransactionScope scope = new TransactionScope())
			{
				using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
				{
					try
					{
						conn.Open();
						SqlCommand cmd = new SqlCommand("SnapCanvas_Store", conn);
						cmd.CommandType = CommandType.StoredProcedure;
						SqlParameter prm = new SqlParameter("@SnapCanvasID", snapCanvas.snapCanvasID);
						prm.Direction = ParameterDirection.InputOutput;
						cmd.Parameters.Add(prm);
						cmd.Parameters.Add(NewSqlParameter("@SnapCanvasID", SnapCanvas.SnapCanvasID, SqlDbType.BigInt));
						cmd.Parameters.Add(NewSqlParameter("@UnitWidth", SnapCanvas.UnitWidth, SqlDbType.SmallInt));
						cmd.Parameters.Add(NewSqlParameter("@UnitHeight", SnapCanvas.UnitHeight, SqlDbType.SmallInt));
						cmd.Parameters.Add(NewSqlParameter("@WidthExpandable", SnapCanvas.WidthExpandable, SqlDbType.Bit));
						cmd.Parameters.Add(NewSqlParameter("@HeightExpandable", SnapCanvas.HeightExpandable, SqlDbType.Bit));
						cmd.ExecuteNonQuery();
						snapCanvas.SnapCanvasID = (long)prm.Value;
						scope.Complete();
					}
					catch (Exception ex)
					{
						return new Result(ex.Message);
					}
					finally
					{
						conn.Close();
					}
				}
			}
			return new Result();
		}
		
		public event NotificationEventHandler<SnapCanvas> OnBeforeDeleteSnapCanvas;
		public event NotificationEventHandler<SnapCanvas> OnSnapCanvasDeleted;
		public Result Delete(SnapCanvas snapCanvas)
		{
			Result result = new Result();
			if (OnBeforeDeleteSnapCanvas != null)
				OnBeforeDeleteSnapCanvas(snapCanvas, result);
			if (result.Succeeded)
			{
				using (TransactionScope scope = new TransactionScope())
				{
					using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
					{
						try
						{
							conn.Open();
							SqlCommand cmd = new SqlCommand("SnapCanvas_Delete", conn);
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.Parameters.Add(new SqlParameter("@SnapCanvasID", snapCanvas.snapCanvasID));
							cmd.ExecuteNonQuery();
							scope.Complete();
						}
						catch (Exception ex)
						{
							return new Result(ex.Message);
						}
						finally
						{
							conn.Close();
						}
					}
				}
				if (OnSnapCanvasDeleted != null)
					OnSnapCanvasDeleted(snapCanvas);
			}
			return result;
		}

		public SnapCanvas SelectSnapCanvas(long id)
		{
			using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
			{
				conn.Open();
				SqlCommand cmd = new SqlCommand("SnapCanvas_Select", conn);
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.Parameters.Add(new SqlParameter("@SnapCanvasID", id));
				SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
				SnapCanvas entity;
				if (!reader.Read())
					entity = null;
				else
					entity = new SnapCanvas(reader);
				reader.Close();
				return entity;
			}
		}
	}
}