SprocketScript is a generic scripting language that Sprocket primarily uses for adding flexibility to pages and templates. It is designed to parse script inline with text (html) and produce a text-based end-result, although the output can be discarded if the behind-the-scenes work done during the script execution was all that was required.

The actual language has been designed to be easy to read for non-programmers (i.e. template/web designers) and if desired, should be very quick to learn as well. It is a design goal that a reasonable level of comfort with writing basic scripts can be achieved by a non-programmer in 15-30 minutes of study.

The script engine has also been designed to be reasonably easy to extend in order that the various Sprocket modules can extend the language to included references to their own functionality.

Generally, scripts are written inline with html code in order to produce html output that can change depending on differing circumstances. Scripts are identified in html code by preceding script code with {? and ending it with }. As far as the scripting engine is concerned though, all of the html chunks in between the script blocks are simply script instructions to show some html.

"SHOW"

The first and most common script instruction is the "show" instruction. For example:

<html><head><title>{? show "The Page Title" }</title></head></html>

would produce a page with the following html:

<html><head><title>The Page Title</title></head></html>

Naturally this isn't very useful by itself. Why not just write that to start with? This is where expressions come in. An expression is basically a reference to some value that we won't know until the script runs. An expression can sometimes be simple e.g. {? show currentdate } would render the current date in place of that bit of script. In this case "currentdate" is the expression. A slightly more complex expression would be {? show 5 + 4 > 10 } which basically means if 5 + 4 is greater than 10, the output is "true" otherwise it's "false". You'll see the usefulness of this feature later.

[to do]


QUICK REFERENCE

Instructions (statements):

section "[section name]" [instruction(s)...] end
show [expression]
if [expression] [instruction(s)...] end
if [expression] [instruction(s)...] else [instruction(s)...] end
end

"section" and "if" statements require a trailing "end" statement to indicate where their instruction list ends.

Shorthand:
"show" can be written as a ? symbol. e.g. {? show "hello" } is the same as {??"hello"}
"section" can be written as an @ symbol e.g. {? section "main content" } can be written as {?@"main content"}
"end" can be written as a ; symbol e.g. {? section "main content" end} can be written as {?@"main content";}

Expression Syntax

Standard mathematical expressions:
+ add {? if 2 + 2 > 10 show "impossible" else show "ok" }
- subtract {? if 10 + 10 <= 5 show "impossible" else show "ok" }
* multiply {? if 2 * 2 > 10 show "impossible" else show "ok" }
/ divide {? if 4 / 2 >= 10 show "impossible" else show "ok" }

True/false (logical) expressions:
= equal to e.g. {?? 10 = 10 } -> "True"
> greater than e.g. {?? 5 > 6 } -> "False"
< less than e.g. {?? 5 < 6 } -> "True"
>= greater than or equal to e.g. {?? 5 >= 5 } -> "True"
<= less than or equal to e.g. {?? 10 <= 9 } -> "False"
<> not equal to e.g. {?? 5 <> 10 } -> "True"
not - a special operator that makes the trailing value equal to everything other than itself. e.g. {? if 5 is not 10 show...}

Shorthand (alternate syntax)
= can be written as "is" e.g. {? if 5 < 6 show "this always shows"; }
<> can be written as "!=", "isnt", "isn't", "is not" and "= not" e.g. {? if 5 is not 10 show "this always shows"; }