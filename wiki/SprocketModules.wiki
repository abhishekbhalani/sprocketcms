= How to Write Sprocket Modules =

Sprocket modules are surprisingly easy to write. How complex they get really depends on you and how tricky you're trying to be. Anyone developing a website that has to process at least one form should probably be writing a simple module. (see ProcessingForms for more info)

Why write a module? Well, Sprocket only provides so many ways to do things out of the box. Inevitably you're going to want to make your website do something that is specific to that website. This means you're going to want to respond to specific types of requests, serve things up in weird formats, or really whatever you can think of.

So the first thing to do is to define your module. All you have to do is implement `ISprocketModule` and apply a couple of attributes to describe it to Sprocket's module registry.

{{{
using Sprocket;
using Sprocket.Web;

namespace MyProject
{
	[ModuleTitle("My Module")]
	[ModuleDescription("This is my module")]
	public class MyModule : ISprocketModule
	{
		public void AttachEventHandlers(ModuleRegistry registry)
		{
		}
	}
}
}}}

Voila! You've just written the most basic Sprocket module possible. Make sure the class is referenced by your web project, along with all the other Sprocket projects, and your module will be automatically registered. To check it out, go to http://wherever-sprocket-runs-from/sysinfo/ and you'll see your module listed, plus you'll see it included in the module dependency diagram. It'll be all by itself at the top of the diagram, because so far it isn't dependent on anything else.

So this is all great, but we should probably make the module do something. To learn how to use it to process forms, go check out FormProcessing. Here though, we'll learn how to make it serve up a bit of custom HTML.

*FIRST read about SprocketPath! [SprocketPath SprocketPaths] are an integral concept in Sprocket and I'm about to make reference to them.*
