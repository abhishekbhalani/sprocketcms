=Quick How-To Guide for Processing Forms in Sprocket=

Because Sprocket is a significant sidestep from the traditional ASP.Net Page framework, processing of forms must be approached a little differently. Below I will give two different methods for processing form posts. _The Custom Way_ can be used if you have a deeper understanding of Sprocket and need to process things differently to normal. _The Proper Way_, though, uses a bunch of shortcuts designed to make your life easier when processing forms using Sprocket.

==Processing Forms the Proper Way==

If you haven't already, get an overview of [BasicWebsiteConstruction basic website construction] and SprocketScript.

The first thing you want to do is set up a page with a form on it and various fields. This method assumes that you're using the page/template system described in BasicWebsiteConstruction. The steps to having a fully-working submittable/processable form are generally:

  # build the form HTML
  # pre-populate the form values with either
   # default values (e.g. for a new record) or
   # pre-existing values (e.g. from an existing record)
  # handle form submission, including:
   * saving the form values if they were all valid, then redirecting to another page
   * displaying the form page again if there were errors
  # display error messages on the form if the form was submitted with any invalid field values
  # display error styles if there are form field validation errors

===1. Build the Form HTML===

Make sure you have a page with a specified code (`<Page Path="contact" Code="my-contact-form" />`). Build your form, being sure to set the form action to the whatever page address is going to process the form. For the purposes of this documentation, point the form action at the same page that is serving the form:
{{{
<form method="post" action="{? show basepath show page:path }/">
...
</form>
}}}

===2. Prepare the Form Field Values===

How do we know which values the form should be displaying, and how do we get the values into the form HTML?

In your website module that you've set up for your own website processing functionality (if you're not sure, just use the code below), you need to interrupt the page processing right before the page is served so that you can prepare the default form values. This is done using the static method !AddPagePreprocessor of the module !ContentManager. The first argument is the page code for your form page (Remember `<Page Code="my-contact-form"...`?). The second is a pointer to the method that will handle the form preparation.
{{{
using Sprocket;
using Sprocket.Web;

[ModuleTitle("My Module")]
[ModuleDescription("This module does custom processing for my website")]
[ModuleDependency(typeof(WebEvents))]
class MyModule : ISprocketModule
{
	public void AttachEventHandlers(ModuleRegistry registry)
	{
		ContentManager.AddPagePreprocessor("my-contact-form", PrepareContactForm);
	}

	public void PrepareContactForm(PageEntry page)
	{
	}
}

==Processing Forms the Custom Way==

Let's say you have the following form somewhere on a page in your website:
{{{
<form method="post" action="/submit-my-form/">
	Your name: <input type="text" name="name" />
	<input type="submit" />
</form>
}}}

You should now make a generic module (or use one you've already created). Here is a basic module template:
{{{
using Sprocket;
using Sprocket.Web;

[ModuleDependency(typeof(WebEvents))]
[ModuleTitle("My Request Handler")]
[ModuleDescription("This is a basic module for handling requests")]
public class MyRequestHandler : ISprocketModule
{
	public void AttachEventHandlers(ModuleRegistry registry)
	{
		WebEvents.Instance.OnLoadRequestedPath += new WebEvents.RequestedPathEventHandler(WebEvents_OnLoadRequestedPath);
	}

	void WebEvents_OnLoadRequestedPath(HandleFlag handled)
	{
		switch (SprocketPath.Value)
		{
			case "submit-my-form":
				ProcessYourForm();
				break;

			default:
				return;
		}
		handled.Set(); // ensure that Sprocket considers the request handled
	}
}
}}}