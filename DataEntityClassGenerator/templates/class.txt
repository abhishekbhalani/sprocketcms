/* ---------------------------------------------------------------------------------------
	This class has been auto-generated by the Sprocket Class Generator. It is recommended
	that you do not modify this file and instead use the fact that it has been generated
	as a partial class to create a separate partial class for storing any custom code that
	you write to extend the functionality of this class.
   --------------------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

using Sprocket;
using Sprocket.Data;
using Sprocket.Web;

namespace [namespace]
{
	public partial class [classname][:IJSONEncoder]
	{
		#region Fields
		
		[fields]
		
		#endregion

		#region Properties
		
[properties]
		
		#endregion

		#region Constructors

		public [classname]()
		{
		}
		
		public [classname]([fieldlistparams])
		{
			[fieldparamassignments]
		}
		
		public [classname](IDataReader reader)
		{
			[rowassigns]
		}

		#endregion
[jsonmethods]
	}
	
	class DataLayer
	{
		public SqlParameter NewSqlParameter(string name, object value, SqlDbType dbType)
		{
			SqlParameter prm = new SqlParameter(name, value);
			prm.SqlDbType = dbType;
			return prm;
		}
		
		public Result Store([classname] [lesserclassname])
		{
			using (TransactionScope scope = new TransactionScope())
			{
				using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
				{
					try
					{
						conn.Open();
						SqlCommand cmd = new SqlCommand("[classname]_Store", conn);
						cmd.CommandType = CommandType.StoredProcedure;
						SqlParameter prm = new SqlParameter("@[primarykey]", [lesserclassname].[primarykey]);
						prm.Direction = ParameterDirection.InputOutput;
						cmd.Parameters.Add(prm);
						[commandparameters]
						cmd.ExecuteNonQuery();
						[lesserclassname].[primarykey] = (long)prm.Value;
						scope.Complete();
					}
					catch (Exception ex)
					{
						return new Result(ex.Message);
					}
					finally
					{
						conn.Close();
					}
				}
			}
			return new Result();
		}
		
		public event InterruptableEventHandler<[classname]> OnBeforeDelete[classname];
		public event NotificationEventHandler<[classname]> On[classname]Deleted;
		public Result Delete([classname] [lesserclassname])
		{
			Result result = new Result();
			if (OnBeforeDelete[classname] != null)
				OnBeforeDelete[classname]([lesserclassname], result);
			if (result.Succeeded)
			{
				using (TransactionScope scope = new TransactionScope())
				{
					using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
					{
						try
						{
							conn.Open();
							SqlCommand cmd = new SqlCommand("[classname]_Delete", conn);
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.Parameters.Add(new SqlParameter("@[primarykey]", [lesserclassname].[primarykey]));
							cmd.ExecuteNonQuery();
							scope.Complete();
						}
						catch (Exception ex)
						{
							return new Result(ex.Message);
						}
						finally
						{
							conn.Close();
						}
					}
				}
				if (On[classname]Deleted != null)
					On[classname]Deleted([lesserclassname]);
			}
			return result;
		}

		public [classname] Select[classname]([classidfieldtype] id)
		{
			using (SqlConnection conn = new SqlConnection(DatabaseManager.DatabaseEngine.ConnectionString))
			{
				conn.Open();
				SqlCommand cmd = new SqlCommand("[classname]_Select", conn);
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.Parameters.Add(new SqlParameter("@[primarykey]", id));
				SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
				[classname] entity;
				if (!reader.Read())
					entity = null;
				else
					entity = new [classname](reader);
				reader.Close();
				return entity;
			}
		}
	}
}